{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dba08812",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:24:55.468762Z",
     "iopub.status.busy": "2025-05-10T15:24:55.468426Z",
     "iopub.status.idle": "2025-05-10T15:25:04.688050Z",
     "shell.execute_reply": "2025-05-10T15:25:04.687074Z"
    },
    "papermill": {
     "duration": 9.228165,
     "end_time": "2025-05-10T15:25:04.689943",
     "exception": false,
     "start_time": "2025-05-10T15:24:55.461778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "60a5ed74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.701374Z",
     "iopub.status.busy": "2025-05-10T15:25:04.700000Z",
     "iopub.status.idle": "2025-05-10T15:25:04.769135Z",
     "shell.execute_reply": "2025-05-10T15:25:04.767860Z"
    },
    "papermill": {
     "duration": 0.076195,
     "end_time": "2025-05-10T15:25:04.770841",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.694646",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave_points_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave_points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0    842302         M        17.99         10.38          122.80     1001.0   \n",
       "1    842517         M        20.57         17.77          132.90     1326.0   \n",
       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
       "3  84348301         M        11.42         20.38           77.58      386.1   \n",
       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave_points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   ...  radius_worst  texture_worst  perimeter_worst  area_worst  \\\n",
       "0  ...         25.38          17.33           184.60      2019.0   \n",
       "1  ...         24.99          23.41           158.80      1956.0   \n",
       "2  ...         23.57          25.53           152.50      1709.0   \n",
       "3  ...         14.91          26.50            98.87       567.7   \n",
       "4  ...         22.54          16.67           152.20      1575.0   \n",
       "\n",
       "   smoothness_worst  compactness_worst  concavity_worst  concave_points_worst  \\\n",
       "0            0.1622             0.6656           0.7119                0.2654   \n",
       "1            0.1238             0.1866           0.2416                0.1860   \n",
       "2            0.1444             0.4245           0.4504                0.2430   \n",
       "3            0.2098             0.8663           0.6869                0.2575   \n",
       "4            0.1374             0.2050           0.4000                0.1625   \n",
       "\n",
       "   symmetry_worst  fractal_dimension_worst  \n",
       "0          0.4601                  0.11890  \n",
       "1          0.2750                  0.08902  \n",
       "2          0.3613                  0.08758  \n",
       "3          0.6638                  0.17300  \n",
       "4          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/breast-cancer-dataset/data.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fe6f71de",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.781957Z",
     "iopub.status.busy": "2025-05-10T15:25:04.781615Z",
     "iopub.status.idle": "2025-05-10T15:25:04.787758Z",
     "shell.execute_reply": "2025-05-10T15:25:04.786813Z"
    },
    "papermill": {
     "duration": 0.013642,
     "end_time": "2025-05-10T15:25:04.789215",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.775573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(569, 32)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "343d51c5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.800023Z",
     "iopub.status.busy": "2025-05-10T15:25:04.799683Z",
     "iopub.status.idle": "2025-05-10T15:25:04.828389Z",
     "shell.execute_reply": "2025-05-10T15:25:04.827303Z"
    },
    "papermill": {
     "duration": 0.036261,
     "end_time": "2025-05-10T15:25:04.830313",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.794052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave_points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave_points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0         M        17.99         10.38          122.80     1001.0   \n",
       "1         M        20.57         17.77          132.90     1326.0   \n",
       "2         M        19.69         21.25          130.00     1203.0   \n",
       "3         M        11.42         20.38           77.58      386.1   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave_points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "\n",
       "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "0         0.2419  ...         25.38          17.33           184.60   \n",
       "1         0.1812  ...         24.99          23.41           158.80   \n",
       "2         0.2069  ...         23.57          25.53           152.50   \n",
       "3         0.2597  ...         14.91          26.50            98.87   \n",
       "\n",
       "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "\n",
       "   concave_points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "\n",
       "[4 rows x 31 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop(\"id\", axis=1, inplace=True)\n",
    "df.head(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f8c715c",
   "metadata": {
    "papermill": {
     "duration": 0.004551,
     "end_time": "2025-05-10T15:25:04.840017",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.835466",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Train Test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d1b64027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.850739Z",
     "iopub.status.busy": "2025-05-10T15:25:04.850437Z",
     "iopub.status.idle": "2025-05-10T15:25:04.858626Z",
     "shell.execute_reply": "2025-05-10T15:25:04.857180Z"
    },
    "papermill": {
     "duration": 0.01575,
     "end_time": "2025-05-10T15:25:04.860464",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.844714",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(df.iloc[:,1:], df.iloc[:, 0], test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d12bfdb",
   "metadata": {
    "papermill": {
     "duration": 0.005129,
     "end_time": "2025-05-10T15:25:04.870651",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.865522",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "83151791",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.881714Z",
     "iopub.status.busy": "2025-05-10T15:25:04.881360Z",
     "iopub.status.idle": "2025-05-10T15:25:04.909574Z",
     "shell.execute_reply": "2025-05-10T15:25:04.908481Z"
    },
    "papermill": {
     "duration": 0.035887,
     "end_time": "2025-05-10T15:25:04.911439",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.875552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.fit_transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7ac9ba70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.923155Z",
     "iopub.status.busy": "2025-05-10T15:25:04.922184Z",
     "iopub.status.idle": "2025-05-10T15:25:04.929435Z",
     "shell.execute_reply": "2025-05-10T15:25:04.928517Z"
    },
    "papermill": {
     "duration": 0.014485,
     "end_time": "2025-05-10T15:25:04.930876",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.916391",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.2674338 ,  0.22760189,  1.23527499, ...,  0.51239496,\n",
       "        -0.89499062, -0.53505651],\n",
       "       [ 0.67019303, -0.2345776 ,  0.59851762, ..., -0.37574787,\n",
       "        -0.81002606, -1.05306453],\n",
       "       [ 1.97223451,  0.29126947,  1.89257292, ...,  1.72692297,\n",
       "        -1.01201729, -0.53288   ],\n",
       "       ...,\n",
       "       [ 0.89663503, -0.51990269,  0.86143679, ...,  1.0766124 ,\n",
       "         0.38268407, -0.15852127],\n",
       "       [-0.95735881, -1.01745305, -0.97653255, ..., -1.25359027,\n",
       "        -0.96071793, -0.88982671],\n",
       "       [-1.5741302 , -1.45841001, -1.54057634, ..., -0.46968162,\n",
       "         0.13420279,  1.13486641]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0f5aac2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.942070Z",
     "iopub.status.busy": "2025-05-10T15:25:04.941743Z",
     "iopub.status.idle": "2025-05-10T15:25:04.949628Z",
     "shell.execute_reply": "2025-05-10T15:25:04.948693Z"
    },
    "papermill": {
     "duration": 0.01554,
     "end_time": "2025-05-10T15:25:04.951527",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.935987",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27     M\n",
       "363    B\n",
       "449    M\n",
       "209    B\n",
       "250    M\n",
       "      ..\n",
       "236    M\n",
       "507    B\n",
       "253    M\n",
       "144    B\n",
       "525    B\n",
       "Name: diagnosis, Length: 455, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ca05159",
   "metadata": {
    "papermill": {
     "duration": 0.004782,
     "end_time": "2025-05-10T15:25:04.961520",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.956738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "916c2507",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.973236Z",
     "iopub.status.busy": "2025-05-10T15:25:04.972849Z",
     "iopub.status.idle": "2025-05-10T15:25:04.979286Z",
     "shell.execute_reply": "2025-05-10T15:25:04.978056Z"
    },
    "papermill": {
     "duration": 0.014562,
     "end_time": "2025-05-10T15:25:04.981074",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.966512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "encoder = LabelEncoder()\n",
    "y_train = encoder.fit_transform(y_train)\n",
    "y_test = encoder.transform(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d6ad4e87",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:04.993646Z",
     "iopub.status.busy": "2025-05-10T15:25:04.992944Z",
     "iopub.status.idle": "2025-05-10T15:25:05.000688Z",
     "shell.execute_reply": "2025-05-10T15:25:04.999717Z"
    },
    "papermill": {
     "duration": 0.016255,
     "end_time": "2025-05-10T15:25:05.002427",
     "exception": false,
     "start_time": "2025-05-10T15:25:04.986172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1,\n",
       "       0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "       0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,\n",
       "       1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,\n",
       "       0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,\n",
       "       0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n",
       "       0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,\n",
       "       0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1,\n",
       "       1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,\n",
       "       0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0,\n",
       "       0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,\n",
       "       1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ca4f57f",
   "metadata": {
    "papermill": {
     "duration": 0.004791,
     "end_time": "2025-05-10T15:25:05.012529",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.007738",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Numpy arrays to Pytorch tensors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8aa6f50f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.024197Z",
     "iopub.status.busy": "2025-05-10T15:25:05.023767Z",
     "iopub.status.idle": "2025-05-10T15:25:05.038562Z",
     "shell.execute_reply": "2025-05-10T15:25:05.037723Z"
    },
    "papermill": {
     "duration": 0.022792,
     "end_time": "2025-05-10T15:25:05.040295",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.017503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train_tensor = torch.from_numpy(X_train)\n",
    "X_test_tensor = torch.from_numpy(X_test)\n",
    "y_train_tensor = torch.from_numpy(y_train)\n",
    "y_test_tensor = torch.from_numpy(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62869139",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.052586Z",
     "iopub.status.busy": "2025-05-10T15:25:05.052117Z",
     "iopub.status.idle": "2025-05-10T15:25:05.058400Z",
     "shell.execute_reply": "2025-05-10T15:25:05.057360Z"
    },
    "papermill": {
     "duration": 0.014171,
     "end_time": "2025-05-10T15:25:05.060042",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.045871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "torch.Size([455, 30])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_tensor.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3676adac",
   "metadata": {
    "papermill": {
     "duration": 0.004984,
     "end_time": "2025-05-10T15:25:05.070606",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.065622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Defining the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "255242e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.082237Z",
     "iopub.status.busy": "2025-05-10T15:25:05.081832Z",
     "iopub.status.idle": "2025-05-10T15:25:05.088482Z",
     "shell.execute_reply": "2025-05-10T15:25:05.087633Z"
    },
    "papermill": {
     "duration": 0.014273,
     "end_time": "2025-05-10T15:25:05.090051",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.075778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class BreastCancerDetectionNN:\n",
    "    def __init__(self, X):\n",
    "        self.weights = torch.rand(X.shape[1], 1, dtype=torch.float64, requires_grad=True)\n",
    "        self.bias = torch.zeros(1, dtype=torch.float64, requires_grad=True)\n",
    "\n",
    "\n",
    "    def forward(self, X):\n",
    "        z = torch.matmul(X, self.weights) + self.bias\n",
    "        y_pred = torch.sigmoid(z)\n",
    "        return y_pred\n",
    "\n",
    "    def loss_function(self, y_pred, y):\n",
    "        # Clamp predictions to avoid log(0)\n",
    "        epsilon = 1e-7\n",
    "        y_pred = torch.clamp(y_pred, epsilon, 1-epsilon)\n",
    "        # Calculate loss\n",
    "        loss = -(y_train_tensor * torch.log(y_pred) + (1 - y_train_tensor) * torch.log(1 - y_pred)).mean()\n",
    "        return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f367e5ec",
   "metadata": {
    "papermill": {
     "duration": 0.004913,
     "end_time": "2025-05-10T15:25:05.100460",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.095547",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### important Parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6df7b0b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.112075Z",
     "iopub.status.busy": "2025-05-10T15:25:05.111763Z",
     "iopub.status.idle": "2025-05-10T15:25:05.116469Z",
     "shell.execute_reply": "2025-05-10T15:25:05.115499Z"
    },
    "papermill": {
     "duration": 0.012641,
     "end_time": "2025-05-10T15:25:05.118276",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.105635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "learning_rate = 0.1\n",
    "epochs = 25"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb5c0189",
   "metadata": {
    "papermill": {
     "duration": 0.006052,
     "end_time": "2025-05-10T15:25:05.130011",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.123959",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Training Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2fd1bc51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.142150Z",
     "iopub.status.busy": "2025-05-10T15:25:05.141785Z",
     "iopub.status.idle": "2025-05-10T15:25:05.380891Z",
     "shell.execute_reply": "2025-05-10T15:25:05.379905Z"
    },
    "papermill": {
     "duration": 0.247206,
     "end_time": "2025-05-10T15:25:05.382551",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.135345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1, Loss: 3.3927715228722946\n",
      "Epoch 2, Loss: 3.253341458792377\n",
      "Epoch 3, Loss: 3.113276491897104\n",
      "Epoch 4, Loss: 2.9702579731917154\n",
      "Epoch 5, Loss: 2.8244380597641645\n",
      "Epoch 6, Loss: 2.6721651307086765\n",
      "Epoch 7, Loss: 2.5175253643117834\n",
      "Epoch 8, Loss: 2.36189763297065\n",
      "Epoch 9, Loss: 2.2039706168436477\n",
      "Epoch 10, Loss: 2.0477782313614115\n",
      "Epoch 11, Loss: 1.8946938051819777\n",
      "Epoch 12, Loss: 1.7465560463260579\n",
      "Epoch 13, Loss: 1.6071559580077215\n",
      "Epoch 14, Loss: 1.4748711744187621\n",
      "Epoch 15, Loss: 1.3521316852993095\n",
      "Epoch 16, Loss: 1.2438869023464183\n",
      "Epoch 17, Loss: 1.150994926498604\n",
      "Epoch 18, Loss: 1.0737803440321798\n",
      "Epoch 19, Loss: 1.0117956205016014\n",
      "Epoch 20, Loss: 0.9636758765063664\n",
      "Epoch 21, Loss: 0.9272389233314269\n",
      "Epoch 22, Loss: 0.899867094145849\n",
      "Epoch 23, Loss: 0.8790242938213719\n",
      "Epoch 24, Loss: 0.862641937090877\n",
      "Epoch 25, Loss: 0.8492318560721632\n"
     ]
    }
   ],
   "source": [
    "# create model\n",
    "model = BreastCancerDetectionNN(X=X_train_tensor)\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    # forward pass\n",
    "    y_pred = model.forward(X_train_tensor)\n",
    "    \n",
    "# loss calculation\n",
    "    loss = model.loss_function(y_pred, y_train_tensor)\n",
    "# backward pass\n",
    "    loss.backward()\n",
    "# parameters update\n",
    "    with torch.no_grad():\n",
    "        model.weights -= learning_rate * model.weights.grad\n",
    "        model.bias -= learning_rate * model.bias.grad\n",
    "\n",
    "    # zero gradient\n",
    "    model.weights.grad.zero_()\n",
    "    model.bias.grad.zero_()\n",
    "\n",
    "    print(f\"Epoch {epoch + 1}, Loss: {loss.item()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f4a5c7",
   "metadata": {
    "papermill": {
     "duration": 0.005071,
     "end_time": "2025-05-10T15:25:05.393397",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.388326",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b133172d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.405794Z",
     "iopub.status.busy": "2025-05-10T15:25:05.405466Z",
     "iopub.status.idle": "2025-05-10T15:25:05.417216Z",
     "shell.execute_reply": "2025-05-10T15:25:05.415860Z"
    },
    "papermill": {
     "duration": 0.019813,
     "end_time": "2025-05-10T15:25:05.418959",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.399146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5831024646759033\n"
     ]
    }
   ],
   "source": [
    "with torch.no_grad():\n",
    "    y_pred = model.forward(X_test_tensor)\n",
    "    y_pred = (y_pred > 0.7).float()\n",
    "    accuracy = (y_pred == y_test_tensor).float().mean()\n",
    "    print(f\"Accuracy: {accuracy.item()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6698d68c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-10T15:25:05.432910Z",
     "iopub.status.busy": "2025-05-10T15:25:05.431724Z",
     "iopub.status.idle": "2025-05-10T15:25:05.457493Z",
     "shell.execute_reply": "2025-05-10T15:25:05.456232Z"
    },
    "papermill": {
     "duration": 0.03429,
     "end_time": "2025-05-10T15:25:05.459062",
     "exception": false,
     "start_time": "2025-05-10T15:25:05.424772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [0.],\n",
       "        [1.],\n",
       "        [0.],\n",
       "        [0.]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2158143,
     "sourceId": 3819198,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 18.267325,
   "end_time": "2025-05-10T15:25:08.319281",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-10T15:24:50.051956",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
